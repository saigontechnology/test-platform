generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  id                        Int                         @id @default(autoincrement())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime?                   @updatedAt
  question                  String
  category                  String
  description               String
  answer                    Int[]
  options                   String[]
  type                      QuestionType                @default(SINGLE_CHOICE)
  assessmentQuestionMapping AssessmentQuestionMapping[]
  ExamAnswer                ExamAnswer[]
}

model Assessment {
  id                        Int                         @id @default(autoincrement())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime?                   @updatedAt
  name                      String
  level                     String
  assessmentQuestionMapping AssessmentQuestionMapping[]
  Examination               Examination[]
}

model AssessmentQuestionMapping {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   Int
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId Int
}

model Examination {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  email            String
  assessmentId     Int
  assessment       Assessment        @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  submittedAnswers ExamAnswer[]
  score            Decimal?
  status           ExaminationStatus @default(IN_PROGRESS)
  expireUtil       DateTime
}

model ExamAnswer {
  questionId    Int
  selections    Int[]
  examinationId Int
  examination   Examination? @relation(fields: [examinationId], references: [id], onDelete: Cascade)
  question      Question?    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([questionId, examinationId])
}

enum ExaminationStatus {
  IN_PROGRESS // Candidate is working on examination, but not finish or submit
  COMPLETED
  EVALUATED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}
