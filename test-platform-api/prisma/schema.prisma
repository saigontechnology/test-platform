generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExaminationStatus {
  IN_PROGRESS // Candidate is working on examination, but not finish or submit
  COMPLETED
  EVALUATED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  PROGRAMMING_LOGIC
}

enum QuestionLevel {
  JUNIOR
  INTERMEDIATE
  SENIOR
  PRINCIPAL
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum QuestionCategory {
  HTML
  CSS
  JAVASCRIPT
  TYPESCRIPT
  REACT
  ANGULAR
  VUE
}

model Question {
  id          Int           @id @default(autoincrement())
  question    String
  category    QuestionCategory @default(JAVASCRIPT)
  type        QuestionType  @default(SINGLE_CHOICE)
  level       QuestionLevel @default(JUNIOR)
  categories  String[]
  description String
  answer      Int[]
  options     String[]
  notes       String?
  isModified  Boolean?
  duration    Int           @default(30)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt

  // Relation
  assessmentQuestionMapping AssessmentQuestionMapping[]
  examAnswer                ExamAnswer[]
}

model Assessment {
  id        Int       @id @default(autoincrement())
  name      String
  level     String
  active    Boolean?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Relation
  assessmentQuestionMapping AssessmentQuestionMapping[]
  examination               Examination[]
}

model AssessmentQuestionMapping {
  id           Int      @id @default(autoincrement())
  assessmentId Int
  questionId   Int
  createdAt    DateTime @default(now())
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Relation
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
}

model Examination {
  id           Int               @id @default(autoincrement())
  status       ExaminationStatus @default(IN_PROGRESS)
  email        String
  assessmentId Int
  score        Decimal?
  expireUtil   DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime?         @updatedAt

  // Relation
  assessment       Assessment   @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  submittedAnswers ExamAnswer[]
}

model ExamAnswer {
  questionId    Int
  selections    Int[]
  examinationId Int

  // Relation
  examination Examination? @relation(fields: [examinationId], references: [id], onDelete: Cascade)
  question    Question?    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([questionId, examinationId])
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  empCode   String?    @unique
  firstName String?
  lastName  String?
  active    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relation
  userRoleAssignment UserRoleAssignment[]
}

model UserRole {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation
  userRoleAssignment UserRoleAssignment[]
}

model UserRoleAssignment {
  userId     Int
  roleId     Int
  assignedAt DateTime @default(now())

  // Relation
  user User     @relation(fields: [userId], references: [id])
  role UserRole @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}
